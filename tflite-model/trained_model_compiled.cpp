/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 29.11.2021 14:04:39

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 50144;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[17];
TfLiteEvalTensor tflEvalTensors[17];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[8];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,4920 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0031709559261798859, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 4960, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[4] = { 1, 123, 40, 1, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data3[8] = { -18607, 10398, -1772, -20040, -13484, -18193, 2508, -22020, };
const TfArray<1, int> tensor_dimension3 = { 1, { 8 } };
const TfArray<8, float> quant3_scale = { 8, { 5.5524214985780418e-06, 8.1351790868211538e-06, 9.4893330242484808e-06, 7.3868154686351772e-06, 5.587126906902995e-06, 3.645963033704902e-06, 9.8829086709883995e-06, 3.5806017422146397e-06, } };
const TfArray<8, int> quant3_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[16] = { 2026, -11962, 6624, -15212, 21086, 238, 19733, 1611, 11236, -12169, -10067, -9579, -8433, -13508, -18762, -12670, };
const TfArray<1, int> tensor_dimension4 = { 1, { 16 } };
const TfArray<16, float> quant4_scale = { 16, { 7.7925988080096431e-06, 5.4771885515947361e-06, 5.2040227274119388e-06, 4.3790937525045592e-06, 6.2529124988941476e-06, 4.2145948100369424e-06, 4.1168618736264762e-06, 3.7861786950088572e-06, 5.9650960793078411e-06, 4.6116579142108094e-06, 6.7152300289308187e-06, 4.1526063796482049e-06, 4.0641298255650327e-06, 3.7690988392569125e-06, 4.037793587485794e-06, 3.9056048990460113e-06, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int32_t tensor_data5[3] = { -3733, -5736, 5719, };
const TfArray<1, int> tensor_dimension5 = { 1, { 3 } };
const TfArray<1, float> quant5_scale = { 1, { 1.0745562576630618e-05, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[3*4960] = { 

  -31, 37, -13, -9, -88, -1, -37, -7, -38, -2, -88, -4, -3, 0, -9, -3, -29, -19, -5, -1, -12, 0, -12, -15, -9, 1, -23, -7, -2, -7, -6, -5, -4, -2, 4, -1, -27, -4, -10, -4, -8, -5, -5, -6, -9, -4, -5, 1, -6, 4, -11, -1, -41, -4, -10, -12, -19, -3, -1, -11, -4, -16, 2, 1, -20, 47, -27, -9, -81, 0, -32, -6, -49, -10, -17, 0, 2, -12, -12, -10, -18, 2, -10, -4, -14, -7, -29, -8, 8, -3, -18, -8, -1, 1, -1, 5, -10, 12, 1, -6, -24, -5, 5, 3, 1, 2, -18, -3, -1, -4, -2, 0, -9, -12, -8, -3, -11, 0, -4, -7, -9, 0, 4, 1, 1, -10, 1, 2, -6, 37, -33, -1, -23, -1, -24, -25, -23, -9, -1, -12, -4, -10, -8, -2, -20, 6, -19, 0, -28, 0, -32, -11, -18, -6, -39, 2, 1, -6, -9, 5, -35, 35, -21, -2, -127, -11, -62, -15, -28, -3, -66, -12, 3, -12, 1, -11, -13, -12, -6, -13, -24, 0, -14, -3, -13, -2, -19, -1, -8, -8, -11, 0, -1, -7, -7, -6, 5, -9, -15, -1, -8, -9, 2, 3, -1, -12, -9, -7, -7, 4, -8, 1, -73, -5, -2, -9, -5, -7, -4, -7, -13, -5, -1, -8, -35, 46, -17, 3, -26, -12, -40, -1, -59, -3, -59, 1, -9, -10, -2, -14, -37, 25, -7, -3, -25, -2, -23, -1, -21, -2, -22, -8, -4, 1, -10, -5, 7, -14, -2, -1, -13, -2, -16, -2, 6, -10, 8, 0, -6, -5, -15, -6, -7, 25, -16, -7, -4, -11, -2, -14, -1, -12, -5, -13, -3, -2, -5, -8, -8, 16, -24, -9, -21, 3, -6, -14, -47, -11, 11, -7, -3, -11, -3, -4, -29, 26, -25, -4, -9, -6, -23, 20, -43, 0, -30, -14, -9, -13, -2, -8, -35, 14, -30, 2, -78, -5, -76, -16, -24, -7, -66, -11, -2, -24, -2, -9, -16, -16, -1, -1, 8, -1, -13, 0, 5, -8, -15, -15, -2, -7, -8, -1, 6, 0, -8, -9, 24, -1, -2, -13, 3, -10, 0, -6, -11, -6, -2, -6, 2, 38, -8, -8, -18, -6, -12, -14, -14, -7, 0, -10, -10, 3, -5, -2, -30, 21, -13, 2, -36, -7, -22, -16, -25, -6, -32, -2, -15, -11, 3, -14, -22, 33, -11, -3, 3, -5, -9, -2, -26, -7, -25, -16, -12, -2, -2, -8, 1, -5, 2, -9, 0, -13, -7, -6, 0, -2, -2, -13, -6, 1, -6, -5, -2, -25, -8, 0, -18, -3, -17, -9, -5, -10, -9, 0, -14, -6, -2, -4, -12, 34, -25, -4, -22, -7, -14, -7, -86, -2, -34, -6, -12, -7, -9, -5, -13, 1, -13, -10, 1, -3, -21, -11, -16, -3, -14, -7, -6, 0, -1, -1, -29, 27, -14, -12, -68, -10, -31, -6, -41, 2, -60, -9, 6, -9, -5, -6, -16, 9, -4, 1, -4, -1, -14, -13, -17, -13, -21, 1, -1, -16, -9, -10, -12, 9, -9, -9, 9, 4, -8, -1, -13, 3, 2, -13, -9, -7, -4, -9, -2, 10, -4, -10, -35, -9, -7, -3, -7, -9, -9, -3, -4, -3, -1, 3, -20, 8, -33, -8, -14, -14, -16, -17, -39, -6, -19, -10, 4, 5, 2, 4, -16, -3, 9, -10, -4, 0, -18, -7, 15, 1, 18, -7, -6, -8, -7, 3, 3, 3, -4, -1, -9, -2, 0, -13, -12, -11, -11, -8, -11, -5, -5, -4, -11, -22, -4, 1, 4, -6, -15, -12, -7, 2, -13, 1, -9, -11, -10, 2, -15, 37, -23, -2, -9, -9, -3, 2, 9, -6, -4, -6, -8, -13, 0, -3, -15, -16, -17, -1, 12, 5, -4, -5, -10, -13, -17, -3, -8, -6, -8, -9, -35, -11, -25, -10, -67, 2, -43, -12, -37, -12, -97, -8, -10, -6, -2, -4, -11, -10, -8, 0, -2, -11, -11, -6, -1, 2, -19, 1, 8, -13, 0, -8, -5, -2, -3, -10, -1, -11, -17, -16, -8, -10, 2, 2, -9, -10, -1, 3, -12, 10, 0, -5, -59, -13, -8, -10, -8, -8, 2, -1, -9, -4, -6, -10, 4, 4, -21, -4, 32, -2, -11, -11, -35, 0, -20, -1, -3, -6, -6, -13, 8, 7, 11, -6, -7, -8, 2, -2, 15, -4, 6, -4, 2, -5, -3, -8, -16, -21, -5, -10, 13, 0, -12, -13, -14, -3, 16, -7, -5, -10, -10, -7, -8, -15, -11, -1, 0, -12, -11, -9, -6, -4, -17, -4, -11, -1, -1, 1, -15, 15, -34, -13, 0, -3, -12, 9, -4, -5, 7, -4, -3, -5, 1, -8, 12, -24, -4, -9, 10, -2, -1, -9, -37, 0, 10, -3, -2, -11, -4, -4, -32, 12, -24, 0, -48, -2, -37, -11, -21, -8, -96, -16, -14, -5, -9, 0, -4, -12, -1, -7, 5, -8, 3, 0, -1, 0, -19, -3, -6, -1, -1, -4, -5, -18, -1, -12, -3, 4, -5, -4, -5, -11, -3, -12, -4, 2, -10, 0, -1, -17, -12, -10, -23, -7, -12, -15, -2, -14, 8, -8, -9, -6, -10, -8, -16, 4, -16, -8, 31, -10, -20, 3, 4, 1, -3, -3, -4, -8, -4, -11, 1, -9, 18, -8, -2, -6, 10, 1, 28, -3, 29, 1, 2, -4, -4, -4, 5, -6, -7, -10, 5, 1, 0, -7, -16, 0, -22, -6, -4, -5, -7, -5, -5, 2, -6, -7, -8, -9, -1, -4, 1, -6, 4, -9, 1, -7, -3, -4, -13, 18, -18, -3, 8, -1, 0, -7, 21, -5, 9, 0, -3, 0, -8, -5, 17, -20, 0, -9, 11, 3, -3, 11, 23, -9, 26, -5, -4, -4, -7, 3, -21, 3, -29, -8, -62, -12, -35, -9, -16, 8, -50, -9, -11, 3, 2, -2, -10, -11, -3, -7, 0, -4, -10, -7, -6, -13, -16, -11, -2, -11, -11, -2, -6, -16, -1, -3, -17, -7, 1, 1, -7, -15, -13, 2, -13, -8, -11, -4, -4, 23, 4, -3, -30, -5, -13, -3, 0, -10, -19, -7, 3, -8, -2, -9, -15, 23, -19, -6, 13, -8, -22, -10, -36, -6, -22, -10, -12, 4, -3, -6, -20, -14, 6, 1, -42, 2, -15, 0, -26, -6, -7, -12, -2, -3, -12, -13, 0, -19, -14, -10, -10, -8, -4, -1, 14, -10, -2, -8, 0, 9, 0, -12, -5, 7, -1, -10, -13, -9, -6, -7, -6, -6, -8, -12, -11, -10, 0, 1, -4, 19, -22, -6, -12, -7, -23, -3, -48, -13, -26, -4, -14, -8, 2, 0, 4, -17, 0, -7, 9, -15, 8, -12, 7, -4, 3, -8, -12, -7, -4, -6, -28, 8, -9, 1, -62, 3, -17, -14, -15, -11, -48, -6, -3, -3, -2, -5, -8, -14, -14, -4, 11, -2, -15, -6, -9, -10, -11, -4, -4, -3, -10, -5, -8, -6, -5, -7, -5, -14, -1, -8, -7, -4, -10, -2, -12, -10, -8, -7, -5, 1, -8, -8, -11, -3, -5, -10, 5, -2, -2, -4, 0, -11, -6, -4, -23, 4, -18, -8, 1, -7, -27, -8, -11, -12, -13, -4, -9, 1, -9, 3, 1, -11, 4, -5, -5, -2, -14, -4, 23, -3, -16, -8, -4, 0, 0, -8, 8, -8, 3, 2, -7, -11, -13, -3, -5, -6, 2, 0, 1, -11, -14, 2, -12, -8, -5, -12, 6, -11, 5, -11, -11, -8, -9, -2, -4, -6, -4, -12, -7, 19, -25, 0, -5, -3, -12, -13, -18, -9, -1, -2, -9, 1, -4, -11, -23, 4, -5, -7, -7, -6, -4, -8, 7, -1, -16, -10, -5, 1, -3, -14, -34, 14, -27, 2, -71, -3, -40, -17, -33, -11, -67, -6, -10, -1, 1, -7, -20, -5, -10, -4, -11, 0, -6, -6, 0, -7, -25, -1, -13, -1, -2, -5, -2, 10, 2, -5, -5, 0, -11, -2, -9, -2, -1, -12, -1, -11, -4, 1, -10, 11, -4, -10, -14, -11, -10, -12, 7, -8, -10, -14, -1, -8, -3, -5, -18, -6, -10, -9, -9, -2, 4, 0, -36, -11, 3, -11, -12, -3, -4, -4, 8, -4, 14, -9, 18, -7, -1, -10, -6, -11, 12, 1, -4, -3, -4, -11, 12, -7, -8, -4, -24, -6, 11, -3, -11, 1, 5, -9, -9, -2, -7, -6, 0, -7, -6, -10, -9, -6, -5, -11, 1, -7, -10, -10, -11, -7, -1, -7, -3, 7, 6, -12, -14, -7, 1, 4, -47, -3, 11, -2, 1, -9, -7, -4, -12, 7, -16, 1, -5, 8, -9, 2, 4, -2, -5, -5, -6, -11, -6, -8, -27, 1, -23, -11, -36, -9, -29, -11, -16, -1, -44, -2, -5, -10, 0, -5, -16, 0, -12, -9, -9, -3, -18, -3, -11, -1, -21, -9, -13, -5, -2, -10, 2, -23, -4, -3, -4, -13, -5, -3, -13, -6, -4, -4, 3, -4, -6, 1, 0, 15, -14, -9, -27, -6, 0, -11, -12, -3, 2, -5, -13, 1, -5, -7, -24, 38, -10, -10, -24, -7, -4, -13, -31, -9, -40, -9, -5, -7, -2, -8, -12, -3, 8, -11, 21, -7, -2, 3, 8, 0, -22, -11, 2, 2, -8, -13, 5, -14, -11, -8, 1, -1, 13, -3, -7, -12, 4, -5, -9, 0, -4, -13, -10, -3, -12, 1, -16, -4, 2, -13, -3, -11, 1, 1, 2, -11, -12, 1, -8, 22, -17, -2, 27, -12, -12, 8, 11, 2, -26, -5, -8, 6, -5, 1, -5, -32, 0, -5, -15, -4, 12, -2, -20, 0, -17, 8, -8, 2, -10, -9, -18, 13, -9, -7, -54, -7, -23, -2, -15, -6, -39, -3, -1, 1, -8, -12, -17, -25, -2, -8, -16, -3, -12, -7, -13, -4, -9, -11, -9, -11, -9, -8, -3, -8, -3, -10, 12, -13, -9, 2, -9, -3, -7, -12, 0, 0, -6, 0, -7, 9, 0, -5, 3, -2, -5, -5, -8, -2, 3, -3, -8, -9, -11, -2, -11, 32, -19, -9, -38, -8, -25, -9, -17, 4, -49, 3, -9, -1, -13, -4, -25, 0, -17, 0, -5, -9, -18, -5, -17, -3, -13, 1, -10, -7, 0, 1, -10, -17, -8, -1, -2, 2, 4, -11, -17, -3, -6, -5, -3, -3, -9, 0, -13, 14, -1, 1, -18, -2, -4, -6, -4, 1, 6, -1, -10, 3, -15, 1, -6, 12, -7, -4, -9, 1, -26, -10, -30, -6, -5, -7, -1, -6, -4, -7, -38, -26, 3, -7, -9, -6, -19, -15, -37, 1, -20, -14, -6, -4, -5, -8, -28, 14, -11, -1, -29, 0, -21, -7, -50, 1, -32, -5, -4, -8, -10, 3, -17, 2, 0, -2, -19, -10, -12, -14, -13, -9, -3, -1, -11, -3, -12, -10, -2, 4, -1, -7, -36, 2, -8, -13, -7, -13, 1, -3, -4, -4, -5, 2, -2, -6, -13, 3, -9, -1, -10, -1, -10, -2, -16, -13, -14, -7, -9, 2, -4, -14, -19, -11, 3, -10, -15, 5, -30, -5, 0, -6, -14, 0, -1, -14, 0, 25, 2, -5, 9, -11, -17, -4, 17, -7, 16, -2, -2, -1, 1, -5, 28, 5, -13, -4, -7, -7, 0, -10, -8, -10, 10, 1, -13, -5, -7, -1, 4, -9, 0, -3, -9, -3, -1, -6, -6, 1, -7, 0, 2, -3, 0, -12, -10, 4, -30, -2, -32, -9, -20, -17, -48, -11, -24, -4, -8, -9, -9, -1, -7, 6, 2, -3, 21, -3, -8, -6, 12, -3, -10, -11, 1, -4, 0, -15, -42, -11, -31, -8, -31, 2, -38, -12, -18, -7, -42, -1, -10, -3, -11, -2, -11, 4, -6, -6, -6, -8, -8, -14, -5, -6, -6, -11, -6, -3, -5, -13, -14, 12, -13, 2, -24, -3, -5, -12, -6, -7, -5, -1, -7, -9, -11, 4, 1, -20, -3, 0, -15, -1, -5, 0, -5, -2, 1, -4, -6, 6, -12, -8, 3, 3, -5, -3, 0, -2, -4, -7, -3, -2, -18, -1, -11, -10, 0, 0, 7, 10, 2, -6, -1, 0, -4, -1, 3, -5, 18, 1, -10, -9, -6, -4, -5, 5, -1, -9, -21, -5, -6, -9, 12, -3, 5, 1, -13, -5, -12, -1, -10, -9, 0, -6, -18, -11, 0, -8, -3, 0, 0, -12, -11, -2, -11, -8, -7, -37, -18, 2, -10, -7, -19, -4, 3, -5, -24, -7, -4, -7, -9, -9, -10, -1, -1, -2, 26, 3, -5, -13, 1, -4, 14, -4, -6, -1, -12, -14, -15, -5, -15, -4, -51, -1, -23, -2, -17, 0, -35, -5, 0, -1, -9, -8, -6, -27, -9, 5, -15, -7, 1, -4, -27, -7, -17, -1, 1, -11, 1, -8, -4, -16, -7, -2, -7, -2, -4, -5, -11, -6, -15, -10, -6, -6, -6, -6, 5, 2, -6, -7, -5, -4, -12, -11, 3, -3, 0, 4, -10, -12, -5, 0, -8, 2, -2, -1, -27, -3, -15, 5, -42, -8, 12, 2, -8, -1, -9, -7, 0, -13, 14, -11, 2, -9, 5, 3, -21, 1, 6, -3, -12, -12, -5, 1, -10, -4, -3, -11, -21, -3, 2, -8, -4, 0, 15, -8, -4, -9, -3, 3, -12, 4, -8, -3, 15, -6, -6, -14, 0, 0, -13, 2, 0, -10, -3, -4, -13, -23, -5, -9, -8, -12, -2, -4, 20, -7, -12, -4, 4, -3, -3, -7, 4, -13, 4, -6, 22, 2, 0, 11, 21, -5, 0, -2, 1, -3, -9, -5, -22, -10, -13, -5, -12, -9, -18, -6, -17, 0, -21, -11, -15, 7, -12, -3, -17, -11, -6, -5, -3, -5, -15, 0, -13, -3, -5, 0, -3, -3, -8, -13, -6, 4, -7, -8, -13, -1, 1, 1, -3, -11, -1, -11, 3, -12, -2, -8, 3, 6, 2, -7, 5, -6, 2, -10, -9, 0, -11, -7, -9, 2, -6, -2, -1, 9, -16, -9, -2, -5, -7, 4, -32, -8, 2, -3, -10, 11, -4, 8, -11, -14, 11, -13, 20, -2, -2, -14, -15, -9, 16, -10, -3, -4, -12, -4, -1, -7, 1, 1, -14, -9, 1, -4, -1, -12, 9, -3, -15, -3, -4, -4, -7, -16, -8, -11, -19, 2, 1, -11, -7, -4, -2, 0, -7, -10, 0, -10, -7, -3, -10, -7, 11, -6, -10, 2, -44, -7, -10, -3, 1, -5, -5, -9, 9, 3, 5, -1, 24, -10, 1, 6, -26, -5, 17, 1, 4, -1, -3, -8, -20, -13, 5, 3, 12, -9, 22, 7, -11, 2, 1, -6, -3, -4, 0, -9, -4, 4, -9, -10, -11, -14, 5, -5, 4, -6, 5, -6, -1, -15, -10, -7, 1, -12, -4, -6, -16, 2, -6, 1, -1, 0, -8, -7, -8, -4, -5, 4, -1, 3, -6, 3, -5, 1, -9, -1, 3, -4, -3, -7, -6, -11, -12, -4, 1, 17, -13, 1, 6, -10, -20, 1, -4, -8, -4, -2, -2, -7, 2, -10, 18, -6, 13, -7, 37, -11, 4, -2, 7, -4, 24, 0, -9, 3, -10, -10, 12, -1, -7, -9, -17, -8, 21, -9, -10, -7, 21, -7, -2, -9, -1, -9, -11, -21, -5, -5, -38, -13, 1, -13, -10, -4, -2, -5, -9, -4, -13, -6, -5, 28, 0, -5, 9, -9, 2, -13, 3, -9, -3, -5, 4, 2, 0, -14, -1, -5, -3, -8, 4, -17, -8, -10, 3, 1, 18, -10, -12, -9, -12, -6, -2, 15, 6, -6, 5, -3, -5, 4, 4, -1, 21, 0, -14, 0, -1, -13, 17, 0, -12, -11, 12, -5, -4, -9, -13, -1, 6, -13, -3, -6, -8, 3, -8, -2, -9, -2, 0, -9, -9, 0, -5, -2, 9, 2, -2, -8, -1, 1, 2, -1, 2, 1, 12, -9, -1, -11, -5, -6, -2, -8, 0, 1, 1, -2, 3, 25, 4, -1, 3, -7, -23, -5, 5, -4, 1, -6, -13, -10, -7, 4, 25, -25, 16, -7, 9, -9, 23, -5, -5, -1, 16, -2, 0, -9, -9, -12, 17, 11, -3, -1, -8, -3, 5, -11, 18, 0, 15, -9, -8, 0, -12, 0, -5, -15, -11, -2, -24, -11, 1, -9, -15, -10, -15, 1, -13, -13, -5, -3, -12, 6, 3, -10, -12, -3, -7, 5, 5, 0, -16, -6, 6, -4, -14, -2, -7, 26, 4, -5, -3, 5, 0, -7, 4, 1, 2, 1, -7, -3, -5, -1, 8, 9, 3, -13, -1, 0, 4, -13, 11, -4, -3, -2, -1, 2, -6, 7, -8, 4, 3, -9, -5, -1, 1, -13, -8, -3, 3, -7, -10, -3, -5, -3, -12, -14, -7, -10, -20, -1, -4, -3, -9, 2, -5, -6, -11, -1, -3, 2, -5, 32, 3, -7, -4, -10, -8, -1, -8, -4, 3, 0, 6, -11, 0, -2, -14, 23, -13, 2, 0, -12, -13, -16, 2, -1, -5, -10, 0, -1, -6, -7, 2, -13, -5, -4, 14, -8, 10, 3, -26, -4, 14, -14, 5, -9, 1, -11, 15, -15, -4, -1, -11, -1, 23, -1, -18, -5, 26, -1, -8, 3, -5, -6, -9, 13, -5, -12, -32, -6, -15, -9, -7, -5, -9, -1, -9, -7, -3, 2, 2, -2, 10, -11, 18, 9, -15, -8, -12, 1, -9, -9, -6, -12, -8, 0, 2, 5, -2, -1, -9, -8, -3, -7, -35, 0, 12, -7, -6, 1, -8, -16, 31, -26, 4, -8, 14, -2, 4, -11, 19, -3, 12, -5, -3, -7, -12, 2, 0, 9, -6, -5, -14, -2, -3, -9, -12, -5, 11, -12, -3, -7, -10, -1, -2, -4, -5, -9, -14, -5, -7, 1, -5, 5, -10, -1, -4, -12, -8, -14, 3, 7, -1, -1, -3, -6, -10, 0, -6, -14, 8, -2, -4, -9, -7, -7, 1, 2, 9, -13, -1, 0, -9, -1, -15, -3, -11, -13, -2, 1, -4, -5, 5, -24, -2, -6, 11, -3, -1, 10, -4, -6, 10, -7, 5, -5, -8, -5, 12, 11, -2, -1, -41, -1, -6, -4, 11, -8, 5, -4, -4, -5, 3, -5, -1, -18, -9, -3, -12, 1, -12, -10, -5, -13, -7, -11, -10, -6, -12, 1, -9, -9, 2, -8, -2, -4, 16, -4, 1, -5, 28, 3, 5, 3, -4, -7, 9, -6, 12, 0, 9, 2, 9, -11, 0, -11, 13, 6, -7, 1, -1, -4, 0, -15, 12, -4, 17, -11, -6, 0, 25, -1, 1, -5, 0, -12, -6, -13, 7, -18, -7, -2, -64, -3, -6, -4, -2, -5, 0, -3, -1, -13, 0, -4, -5, -12, 0, 0, -7, -2, -3, -8, -3, 7, -2, -8, -9, -7, -4, -14, -7, 3, -11, -7, -14, -1, 0, -9, 5, -7, -2, -7, -3, -3, -8, 0, -27, -8, -5, -2, 4, -8, -13, -9, -13, -5, 6, -11, -4, -2, 0, -14, 4, -18, 23, -9, 29, 1, 27, -8, 3, -12, 26, -12, -5, -1, -2, -6, 11, -13, -6, -1, -13, 0, 22, -3, -7, -3, 37, -3, 1, -1, -9, -6, -13, -22, 0, -9, 15, 1, -7, 0, -16, -4, 2, -4, -8, 1, -7, 1, -11, -17, 5, -4, 4, -14, 7, -2, 35, -8, 8, -12, -7, 1, -1, 1, 0, -21, 17, -4, 11, -2, 18, 9, 3, 0, 11, -2, 2, -9, -3, -12, -4, -4, 13, -1, -6, -15, 9, -2, 10, -10, 6, -7, -2, -11, -9, -3, -8, 5, -3, -4, -17, -14, 0, -3, -9, 1, 5, -8, -2, -14, 1, 0, -6, 10, -7, 1, -15, -9, -5, -14, -9, -8, -11, -7, -11, 4, -11, -8, -3, 6, 2, -7, 18, -2, -6, -2, 17, -7, -11, -8, -6, -10, -3, -9, 10, -7, -3, -9, -15, -4, -18, -1, 2, -10, 18, -6, -10, 5, -9, -10, 3, -10, 23, -7, 23, -3, 8, 0, -18, -5, 24, -5, -5, -10, -6, -4, 7, -7, -8, -3, -12, -10, 11, -8, -13, -8, 10, -6, -6, -4, 2, 2, -1, -16, 0, -5, -15, 2, 3, -7, -14, -7, -4, -4, 0, -2, -10, -13, -5, 2, -9, -9, 0, -11, -17, -10, -1, -8, 12, -4, -5, -7, -3, -9, -11, -13, 10, 2, 23, -10, -9, 7, 13, 2, -2, -3, -12, -12, 3, -11, -5, 21, 0, -10, 0, -1, 8, -11, 11, 4, -8, -13, -10, -4, 1, -9, -5, 16, -11, -2, -18, -8, -3, -7, -11, -6, -9, 1, -7, 4, -7, -10, 1, -15, -9, -7, -12, 1, -5, -3, -2, -10, 5, 2, -5, -3, -7, -7, -8, 38, -2, 3, -10, 6, -5, -4, -8, -6, -6, -8, 0, 2, 0, -8, -12, 13, -8, -7, 10, 1, 3, 8, 17, -1, -1, -5, -2, -6, -3, -8, -6, 6, 2, -12, 10, -10, 8, -3, 17, -11, 21, -3, 4, -10, -6, -9, 29, 12, -3, -9, -9, -14, -4, -7, -14, -9, 6, -7, -11, -8, -1, -8, 4, 17, -3, -6, -9, -2, -10, -7, -12, 5, -5, 0, -3, 1, -5, -6, -4, -6, -4, -4, 8, -12, -2, -9, -8, -5, -7, 1, 3, 1, -8, -10, 1, -10, 17, -8, 11, 7, 14, -2, -22, -13, -4, 3, -7, -9, -5, -11, 3, -26, 7, -11, 9, -8, 5, -7, -5, -10, 14, -3, -3, -11, 0, -2, 4, -6, -4, -5, 11, 2, -8, 1, -3, -2, 4, -7, -7, -12, -7, 1, -2, 13, -12, -12, 0, -11, 0, -1, -14, -6, -13, 1, -7, 1, -6, -4, -11, -12, -5, -3, 3, 2, -4, -10, -10, -8, 2, -11, -12, -13, -5, 0, 0, -4, -9, -1, 17, 3, -2, -6, -21, -1, 17, -12, -3, -4, -5, -8, 27, 0, -13, -14, 26, -1, -1, -6, 2, -14, 27, -2, -1, -9, -5, -12, 17, -10, -10, -10, 2, -4, 2, -3, 1, -8, 33, 5, -7, -2, -11, -14, -7, 4, 1, -1, 6, -1, -8, -2, -6, -13, -5, -13, -3, 1, -9, -2, 0, -11, -10, 2, 5, 4, 7, -5, -3, -13, 3, -11, -8, -5, -1, 2, 16, 1, 11, -8, 13, -1, 16, 8, -19, -3, 20, -8, -2, -15, -8, -12, -1, 6, -1, -8, 18, 2, -8, 2, -18, -11, 12, 5, -1, -9, 1, -12, 3, -21, -1, -3, -2, -9, 1, -14, -9, -11, -10, 0, -6, 0, -1, -13, -5, 13, -11, -11, -19, -3, -6, -7, -14, -8, -12, -9, -6, -14, -1, -10, 1, 21, -13, 0, -11, -6, -3, -7, 5, 0, -5, -10, -4, -13, -1, -3, -7, 14, 6, -5, 16, -2, 5, 9, 25, 3, 6, 4, -4, -5, -1, 5, 1, -7, 15, -2, 13, 0, 18, 1, 13, 2, 25, -3, 2, 1, -9, -9, 24, -4, -3, -9, -18, -6, 15, -8, 16, -8, 4, -8, -9, -8, -3, -5, -7, -2, -5, -12, -15, 4, -3, 0, -14, -8, -4, -8, -4, -1, -8, -11, -8, -1, -12, 1, 8, -2, -19, -1, 13, 1, 2, -11, -3, -8, -2, -8, 13, -2, 7, -1, 2, -5, 5, -8, -6, -2, 6, -10, -9, -9, 3, 0, -11, 0, -13, -9, -4, -4, -13, 1, -4, -4, -6, -15, -9, 0, -7, -3, -5, -4, -6, -2, -16, 1, -4, -6, -4, -10, -7, 1, 1, -5, -5, -12, -1, -8, 2, -9, -6, -4, -4, -5, -11, -6, -6, 3, -6, -5, -2, 0, -9, -2, -4, -8, 19, 3, -16, -9, -4, -8, 0, -10, 0, -4, -6, -5, -24, 0, 11, -2, 8, -9, -17, -3, -43, -11, -10, -1, -3, -7, -5, 2, 9, 18, 8, -6, 7, -4, 17, -8, -6, -12, 3, -8, 0, -12, -8, -7, 10, -11, -5, -11, -40, -1, -5, -7, 1, -5, -7, -4, -9, -1, 2, -12, 1, -6, -6, -9, -7, 1, -11, -14, -5, -7, -5, -9, -1, -2, -1, -5, -2, -15, -6, -3, 1, -10, -6, -1, -30, -10, -2, -5, -14, -4, -4, -2, -4, -16, -12, -5, -5, 6, 7, -2, -17, -9, 2, -3, -2, -10, -6, 5, -13, 1, -17, -4, -53, -5, -24, -8, -17, -10, -32, -6, -6, -8, -4, 1, -4, 21, -1, -5, -17, -4, -14, -11, -14, -11, -2, -12, -4, -2, -3, 2, -5, -15, -13, -6, -21, -7, -9, -6, -11, -6, -10, -12, -1, -2, -7, -4, -5, 16, -4, -2, -6, -11, -8, -12, -2, -2, 2, -3, -11, -1, 1, -11, -6, 20, 13, -4, 15, -7, -14, 3, -28, -10, -27, -5, 1, -6, -7, -7, -11, 9, 15, -7, -16, -4, -2, 7, -25, -2, 0, -1, -2, -1, -8, -12, 9, -3, -3, -2, -7, -4, 3, -13, -14, 0, 15, -6, -2, -10, -11, -14, -6, -28, -8, -2, -15, -1, -3, -6, -11, -4, -9, -7, -5, 1, -4, -1, -13, 10, -3, -10, 27, -13, -8, 3, -9, -13, -1, 3, -4, -1, -14, -6, -27, -3, 3, 0, 9, -11, 10, -11, -19, -15, 17, -10, -10, -10, 1, -11, -28, 5, -19, -2, -45, -8, -23, -13, -47, -9, -54, -9, -13, -1, -12, -3, -13, -6, 1, -9, -5, -6, -10, -6, -8, -9, -11, -9, -12, -2, -7, -9, -6, -22, -8, 0, -33, -10, -15, 4, -4, -1, -3, -3, -3, -10, -13, -9, -1, -21, -7, -10, -49, -11, -13, -6, -5, -1, 1, -9, -5, 0, -3, -11, -14, -20, -5, -12, 22, -4, -20, -12, 13, 1, -54, -7, -11, 3, -6, -1, 18, -4, 13, -4, -18, -4, -1, -6, 11, -4, 22, -4, 0, -3, -5, -7, 18, -8, 1, 0, -27, -8, -3, -10, -14, -12, 23, -4, -4, -10, -6, -1, 0, -6, -1, -2, -23, -6, 3, -11, -8, 0, -5, -11, -1, -4, -4, -5, 0, -23, -19, 2, 10, 0, -9, -16, -4, -11, -6, -3, -8, -10, -12, -5, 8, 3, -17, 0, -11, 1, 18, -9, 10, -11, 19, -6, -4, -9, -10, -5, -44, 19, -28, -10, -59, 2, -39, -11, -40, -2, -90, -5, -14, -8, -4, -8, -24, -1, -7, -2, -4, -5, -13, -10, 1, -4, -22, -4, -3, -1, -4, -8, -2, 5, -2, -10, -11, 0, 3, -1, -8, -7, 0, 0, -9, -4, -9, -8, -10, 6, -12, -10, -23, -2, 3, -12, -9, -5, -6, -10, -8, -8, -3, -8, 8, 1, -1, 0, 19, -4, -23, -7, -39, -14, -15, -11, -9, -3, -9, -3, 10, -4, 6, -7, 15, -15, 7, -7, -4, -7, 15, -9, -11, 5, -4, -2, -2, 0, -1, -1, -3, 1, 0, -3, -20, -8, -5, -11, -6, 4, 2, -11, -13, -16, 2, 1, -14, -13, 0, -3, 0, -5, -7, -2, -7, -8, 1, 1, -4, -40, -7, -12, 5, -11, 0, 0, -18, -4, -10, -7, -6, -7, 0, -11, 11, -43, 8, -9, 8, -6, 0, 0, 1, -13, 0, -4, 3, -11, -11, -7, -39, 28, -42, 0, -55, -4, -36, -8, -62, -8, -64, -8, -2, 1, -2, -12, -12, -18, -5, -6, -3, -1, -12, 1, -15, -2, -29, -2, -11, -11, 1, -5, -4, -24, -10, -4, 18, 0, -10, -10, 6, 1, -5, -14, -7, -6, -7, -4, -4, 1, 0, -13, -18, 4, 2, -9, -1, 0, -1, -10, -8, -7, -11, 0, -16, 3, -8, -1, 6, -10, -10, -9, -37, -12, 1, 5, -11, -11, 1, -2, 8, -33, 10, 2, 16, 0, -2, -7, -3, -2, 16, 11, -4, -8, -7, 1, -9, -1, 7, -6, 11, -13, -8, -6, -4, -13, -19, -8, -10, 2, -7, 0, -1, 13, -11, -14, -3, -2, -17, 0, -5, -4, -4, -15, -9, 2, -5, -9, -11, -7, 7, 0, 0, -11, -12, -1, 5, -2, -1, -6, -10, 0, -7, -9, 1, -20, -2, -9, -10, -2, 1, -1, -24, -6, -1, 7, 3, -9, -4, -3, -30, -11, -30, -10, -45, -17, -20, -12, -51, -12, -52, -11, -1, 0, -6, -5, -4, 9, -6, -3, -9, -1, -4, -2, -2, -6, -6, -1, 2, -6, -11, -1, -5, -10, 1, -7, 13, -10, -5, -1, -11, -7, -3, -8, -5, -3, -10, 0, -1, 28, 10, -2, -41, -9, -3, -5, -10, -6, 3, -7, 1, -8, -10, -10, -25, 1, -18, -9, -7, -7, -2, -11, -17, -7, -18, -6, -11, -5, -1, -10, -6, -26, -2, -10, 5, -8, -12, -1, -28, -8, 9, -3, -8, -5, -12, -5, -2, -7, -2, -8, -14, 11, 2, -3, -1, -15, -10, -9, 7, -4, 1, 2, -2, -27, 0, -9, -5, -8, -1, -7, -12, 1, -2, -7, -2, -9, 3, -7, -5, -12, -6, -4, -17, -7, -3, -11, -46, -14, 8, -3, -5, -7, -7, -13, -3, -21, -4, 0, 10, -16, 9, -1, -14, 1, 5, 1, -3, -1, -7, -8, -28, 7, -30, 0, -20, -11, -41, -2, -17, -1, -27, -5, -3, -9, -5, -10, -5, 1, -7, -2, -15, -6, -7, -12, -4, -8, -3, -15, -1, -1, -5, -7, 6, -14, 5, 2, -11, -6, 2, -6, -11, 2, -9, -16, 4, -1, -4, 1, -9, -20, -13, 1, 0, -9, -9, 0, -13, -8, 2, -1, -9, -2, -7, -9, -16, 5, -22, -11, 11, -11, -28, 7, -11, -4, 1, -13, -5, -1, -10, -4, 6, -11, -6, -2, -5, 3, 16, -1, -2, -10, 11, -15, -2, 0, -3, -3, -2, 3, -11, -4, -11, -4, -19, -5, -4, 1, -12, -11, -14, -12, 2, -1, -15, 3, -2, -8, -18, -8, -7, -2, -6, 2, -1, -8, -7, 4, -11, -4, -4, -17, 10, 0, 3, -7, 14, -11, -24, -7, -3, -7, 3, -3, -6, -2, -7, -34, 5, -3, 5, -10, 3, 0, 17, -6, 6, -1, -1, -7, -1, 2, 
  -3, -2, 9, 6, 3, 0, 1, -5, -7, -7, -15, -8, -13, -2, 1, -4, -14, -1, 10, 4, 22, 6, -7, 5, 7, 0, -44, 7, 12, 2, 8, 8, 6, 11, 16, 2, 29, 6, 8, 3, 9, 1, 6, 4, -9, -1, 2, 6, -10, 0, -3, 3, -10, -4, 2, -1, 8, 13, -10, -4, -3, 2, 2, -4, -20, -19, 2, 9, 13, 9, -7, -2, -4, 11, -2, -8, -1, 8, -2, 7, 6, -18, 21, -1, 43, -6, 14, 16, 5, -2, 19, 10, 4, -6, 3, -1, 20, 3, 7, 1, 27, 11, 8, -5, 4, -3, 19, 5, 2, 7, -3, 9, -3, 10, -5, 1, -1, 8, 2, 11, -8, 7, -4, 8, 4, 10, 3, -3, 6, -48, 10, -1, 16, 6, -1, 2, 7, 12, 19, 3, 0, 3, 1, -5, 21, -18, 14, -4, 31, 3, 24, 20, 40, 0, 13, 6, -2, 0, 2, 8, 6, -13, -6, -1, -15, 4, -3, -12, -16, -1, -15, 6, 8, 10, 8, 6, -6, 6, 0, 5, 25, -2, -9, -3, 15, 5, -3, -8, -2, 6, 6, -6, 1, 0, -4, -2, 10, 1, 13, 1, -9, 6, -1, 1, -1, 5, 9, 1, 1, 2, 10, -2, -16, -2, 3, 2, -5, -3, 14, -2, -4, 5, -6, 6, -8, -32, -14, 0, 14, -6, 5, 12, 5, -3, -4, 3, 0, 8, -7, 1, 24, -16, 8, 6, 28, 9, 18, -12, 37, 4, 9, 3, 2, -6, 8, 4, -7, 11, 11, 11, 9, 14, 21, 5, 11, 9, 16, 8, 7, -3, 3, 3, 4, 12, 12, 9, 22, 5, 2, 2, 10, 7, 11, 6, 2, 4, 1, 4, 13, -30, 5, -3, 18, -9, -5, 5, -31, 0, -17, 2, -4, 8, -3, 9, 21, -24, 24, 12, 24, 15, 21, 2, 28, 8, 17, -2, -2, -5, -3, 6, 6, 19, 3, -8, -18, -9, -6, -7, 7, 9, 2, -7, -7, 7, -3, 4, -1, 3, 8, -5, 16, 1, 3, 2, -17, 13, -25, 1, 4, -3, 10, 3, -3, 1, 8, 10, -5, 10, 4, -1, -7, -5, 9, 12, -3, -6, -2, -4, 7, -3, 15, 1, -21, 4, 0, -1, -2, 7, 13, 7, 12, -6, 5, -4, 8, -16, -3, 10, 7, -1, -7, -18, -17, -5, -21, 4, 8, 6, 1, 4, 16, -13, 16, 11, 9, 3, 10, 0, 11, -2, 6, 3, 7, 3, -5, -10, 10, 3, 5, 1, 5, 3, -4, -5, 9, -6, -6, 2, -2, 4, 2, -1, 1, 6, 5, 14, -3, 5, 1, -2, 0, 1, 22, -4, 5, 0, 6, 1, 7, -52, 4, -6, -2, -1, 18, -3, 14, -2, -11, -1, 6, 1, -5, 10, 12, -19, 16, 0, 20, -1, 25, 11, 17, 3, -4, -2, 9, 7, -6, 8, -18, -4, -10, -2, -4, -11, -7, 3, -19, -4, -31, 7, 7, 2, 2, -1, -18, 6, 4, 5, 18, 9, 9, 3, 8, 11, 3, -2, -7, -1, 3, 10, 3, 8, 11, 8, 4, 2, 6, -3, 14, 7, -5, 6, 11, 12, -2, 2, 1, -14, -4, -1, -34, 9, 0, 1, 9, -3, 8, 1, 2, 10, -2, 10, -13, -19, -6, -3, -9, 1, 2, -12, -4, 9, -12, 2, -10, -5, 8, 3, -22, -22, 1, 5, 15, -2, -11, 1, -39, 5, -8, 3, -10, 2, 5, 7, 2, -5, 2, 11, 2, -2, 6, -4, 18, -6, 11, 2, -4, 4, 7, 8, 8, 14, 5, 3, 13, 1, 5, -1, 10, -1, 10, 3, 5, -3, -1, 5, 11, -43, 11, 9, 6, -2, 3, 1, -51, -2, -7, -3, -7, -3, 3, 2, 6, -13, 22, 3, 8, 5, 4, -2, 9, 8, -6, 2, 4, 0, -1, 1, -4, 11, 3, -4, -1, -1, 1, -1, -12, 1, -20, -3, 0, -2, 12, 4, 0, -14, 0, 0, 5, -5, 2, 4, 6, 1, 6, -4, 0, 9, 0, -7, 0, 9, -1, -6, 0, 4, 12, -2, 2, 6, -2, -1, 11, 2, 8, 10, -5, 22, 2, -6, -10, 3, 4, 4, 24, -1, 15, 1, 1, -10, 11, 9, -20, -25, -1, 1, -17, 5, -17, -13, -1, 11, -14, -12, 1, 5, 5, -4, -4, -1, -14, -7, 9, 5, 14, -4, -4, 8, -11, -11, -2, 7, 9, 8, 6, 8, -3, 9, 16, -3, -4, 2, -9, 6, -9, 5, -1, 3, -5, -5, 3, 1, 3, 5, 12, 6, 12, -3, -11, -4, 5, -2, -5, 7, 7, 9, -1, -42, -1, 4, -12, 7, -13, 2, -48, -3, -13, 13, -9, 2, 5, -5, -13, -6, -17, -3, -5, 0, 8, -5, 30, 1, -12, 3, 2, -9, 8, -2, 3, 4, -12, -5, -6, 2, -7, -8, 21, 8, -26, -10, 2, -1, -7, 6, -16, 4, 7, 0, 27, -5, -7, -5, 0, 5, -13, -5, 5, 3, 0, 3, 4, 6, -2, 2, 9, 8, -1, 6, -4, 11, 17, 9, 2, 7, 1, 6, -4, 24, 2, 7, -40, 5, 4, 4, -16, -1, -7, 5, 4, -4, 0, 1, -4, -19, -6, -3, -24, -4, -4, -11, -21, 0, -30, -2, 12, 0, 2, -1, -8, -6, 14, -1, 15, -1, 12, 0, -16, 4, -8, 4, -4, -1, 10, 10, -30, 16, -5, 4, -7, -3, -21, 6, -7, -3, 6, 5, 4, 4, 7, 4, 12, 6, 9, 4, 6, 10, -5, -2, 5, 11, 1, 9, 6, -3, 4, 5, 13, -33, 3, -4, -3, 8, 2, -2, -32, 8, -12, -7, 4, -8, -5, 7, -4, -10, 15, -3, 23, 5, 7, 0, 25, 11, 0, 5, 7, -5, 14, 6, 4, 2, -9, 3, -25, -6, -21, -2, -9, -3, -10, -2, -7, 6, 7, 6, -25, -1, 12, -1, 17, -3, -2, 6, 7, 0, -22, -5, 7, -5, 6, 12, -5, 8, 2, 8, 13, 9, -10, 11, 6, -3, 17, 3, 9, 0, 2, 5, -1, -7, -8, 0, -25, 4, 7, 0, -2, 13, -1, 6, -2, -2, -1, -4, -24, -18, -2, 3, -19, 3, -19, -4, -48, -3, -37, -1, 1, 1, -1, -4, 10, -2, 1, 6, 18, 1, -8, 0, 19, 2, 15, -9, 2, -3, 1, 11, 5, 1, -2, 6, 17, -4, -11, -2, 8, 1, -3, -1, -2, 8, 8, 5, 2, -2, 1, 13, 11, 8, 10, -1, 13, -3, 0, 4, -3, -5, 7, 9, 6, -36, 4, -7, -10, 11, 6, -5, -8, -1, -11, 4, -3, 1, 9, -4, -3, -6, 1, 13, 2, 7, -7, -7, -3, -3, -7, 7, 4, 5, 7, -4, -9, 12, -12, 4, -13, 3, -41, -3, -1, 0, -20, -3, -3, 11, -2, 2, -9, -6, 8, -5, -3, -6, -7, 1, 0, 6, -34, -9, -1, -7, 1, 9, 1, -4, 12, 7, -2, -4, -1, 3, -2, 5, 7, -4, -5, 10, 8, 6, 0, -6, 0, 4, -24, 10, -2, 0, -1, 2, 20, 3, 9, 5, 8, -1, -15, -22, 0, -7, -14, 6, -10, 2, -30, -4, -1, 2, 3, -3, -3, 1, 2, 6, 5, 10, -2, 4, -9, 4, 8, -6, -13, -2, 0, 2, 8, 5, -3, 1, -6, 2, 2, 7, -15, -1, 0, 1, -14, -3, 5, -4, 5, 8, 6, 15, 12, 5, 7, 1, 1, 10, 14, 7, 12, 7, 5, 0, 2, 6, 6, -19, 5, -7, 11, -3, -8, -8, 10, -9, -14, -1, 10, -5, 1, 14, -15, -12, 2, -6, 22, 6, 14, -2, -9, 1, 17, 7, 4, -5, -1, 6, -40, 0, -11, 4, -10, -6, -26, -13, -1, -2, -18, -10, 4, 4, 3, 9, 0, 1, 9, -3, -7, 6, -8, 5, 4, -1, -28, -4, -9, 8, -3, -7, -4, -3, -3, 4, -9, 3, 0, -3, 4, 2, 1, -8, -1, -4, 2, 5, 7, 1, 2, 1, -37, 0, 9, 0, 5, 0, 10, -7, 4, 8, 1, 12, -5, -18, 2, 8, -6, 4, 2, -9, -30, -6, -37, 0, -1, -2, -1, 8, -19, -9, 9, 2, 8, -1, -19, 2, -3, 1, -1, 5, 4, -2, 0, 0, -7, 14, 11, -1, -11, 9, -10, 6, 3, 2, 1, 11, 5, -2, 2, -4, 7, 10, -1, 3, 14, 5, 1, 4, 1, -5, 7, 7, 4, 8, 10, 2, 13, -6, -4, -1, -1, -5, -10, -2, -1, 1, -7, 1, -5, 2, 3, 4, 14, -26, -5, -6, 7, -2, 8, 6, -6, 9, 17, 5, 6, -3, 0, 0, -25, 16, -16, 4, -24, -10, -18, -3, -28, -7, -21, 0, 7, 7, 6, 9, -11, 7, 5, 7, 11, -5, 11, -4, 16, 1, -13, -6, 0, -2, -3, -1, 10, 0, 10, 7, 15, -1, 1, 0, 6, 13, 1, 6, 6, 7, 0, 7, -7, -26, 11, -2, -36, -3, 11, 0, -7, 2, 12, 3, 9, 1, 1, 4, -10, -21, -7, -1, -13, 2, -2, -5, -18, 10, -6, -4, 6, -6, 5, 6, 4, -17, 7, -6, 2, 11, 1, 1, -15, 3, 7, 3, 6, -1, 11, 2, 4, 8, 6, 2, -8, 0, -16, -2, -9, 2, 1, -6, -1, 2, -2, 2, 12, 13, -4, 10, 22, -1, -2, -1, 8, 9, -11, -3, 5, 2, 6, 1, 10, -28, -13, 6, -4, -3, 13, 1, -19, -3, -35, -1, -4, -2, 3, 5, 19, -6, 16, 7, 24, -3, 13, 8, 11, -5, 7, 12, 0, 0, -5, 5, 1, 4, -6, -5, -11, -8, 12, 2, -23, 7, -17, -4, -3, 0, 7, 3, -8, -8, 5, 3, 32, -11, -11, 6, 9, 2, -3, 2, 0, -1, 5, 9, -2, 7, 3, 0, 8, 10, 8, 11, -3, -5, 10, 10, 2, 8, 7, 8, -7, -21, 10, 0, -17, 3, 12, 3, 7, 4, 2, -1, -6, -1, 11, 9, -15, -19, -13, 9, -2, -3, 5, -14, -4, 0, -23, 0, 3, 4, 0, 8, 1, 13, 0, -4, 16, 8, 6, 7, 3, 13, 14, 3, 4, -6, -5, -2, 2, 12, 2, 1, 4, 7, -4, 1, 5, 8, 3, 5, 7, 2, 8, 13, -3, 7, 0, 1, 12, 4, 4, -1, 10, 4, 1, 5, 7, 5, 2, -6, 5, -34, 16, -3, 10, 1, 13, 2, 30, -5, -5, 6, -2, 11, 5, 5, 20, -4, -5, 1, 19, 10, 14, 0, 27, 0, 28, 13, 3, -3, 4, -1, -14, 3, -13, 0, 2, 1, -1, -5, 22, 13, -27, -1, -1, -1, 14, 2, 1, -5, 0, 2, 8, 1, -1, 2, 22, 3, -7, -5, 8, 9, 2, 3, 7, 2, -3, -1, 25, 4, 9, 3, 6, 0, 6, 12, -4, 10, 5, 0, 3, 8, 2, 9, -48, 7, 7, 0, 11, 4, 6, 10, -3, -9, 1, -4, -28, -6, -13, 2, 1, 8, -12, -6, -5, 6, -14, 3, 4, -6, 3, 1, 19, 3, 7, -4, -6, 1, 13, -7, -3, 5, 4, 6, 3, -4, -5, 7, -8, 10, 1, 1, -5, 6, -17, -5, -7, 4, -3, 4, 1, 6, 1, -3, -4, 8, -3, 3, 10, 2, -4, 6, 13, 1, 13, 1, 7, -3, -1, 7, -12, -24, -4, 2, 2, 3, -3, 7, -10, 0, -25, -1, 1, -3, 8, 3, 17, -8, 2, 8, 12, 8, 24, -6, 13, 5, 10, 3, 11, 0, -4, 7, -19, 3, 6, 1, 8, 4, -20, -1, 20, 0, 9, -3, 0, -4, 4, 1, 3, 7, -3, -6, 9, 7, -8, 1, 1, 1, -25, -3, 7, -2, 5, 5, 7, 9, -3, 2, 1, 7, 6, 8, 9, 10, -1, 3, 6, 3, 1, 1, -1, 6, -1, 4, -9, -5, 2, 7, 4, 2, 14, 5, -7, -4, -1, 7, -9, -26, -11, -1, 8, -5, -14, 5, -28, -8, -26, -6, -2, 10, 13, 8, 5, 1, 5, 2, 11, 11, 18, 2, 4, 0, -12, 5, 2, 4, 0, 3, 20, 9, 7, -1, 47, 3, 2, 4, -12, 13, 20, 7, -6, 12, 2, 6, 12, 10, 2, 1, 0, -3, -4, -1, 2, 4, 16, 11, 10, -1, -1, 1, -1, -18, -8, 8, 31, 4, -4, -2, 14, 2, -1, 7, 11, 7, -2, 3, 9, -19, 12, -5, -7, 1, 20, 3, 10, 1, -11, -3, 7, -4, 9, -5, 8, 5, -4, 7, 9, 0, -4, -8, 30, 8, -22, 8, 3, -1, 2, -5, -7, 15, 9, 6, 12, -5, 10, 4, -5, -2, -31, -4, 1, 0, 0, 2, 15, 6, 0, 12, 13, 0, -1, 2, 12, 3, 4, 4, -3, -1, 1, 7, 7, 3, 4, 0, -14, -3, 0, 4, -31, 6, 1, 8, -1, 7, 0, 10, -15, -13, 0, -3, 9, -8, 7, -5, 4, 3, -17, -5, 4, -1, 5, 1, -7, -4, -3, 3, 17, 13, 4, 6, 36, 2, -4, 4, 0, 0, -3, 1, 22, 1, 12, 4, 3, 2, 0, 3, -3, 1, -10, -3, 1, 7, 6, -10, -2, -12, 9, 8, 8, 2, 8, 3, -3, -1, -5, 4, -5, 2, 5, -1, 15, -19, -13, 4, 8, -2, -7, 6, -30, 8, -20, 10, -5, 12, -3, -2, -1, -26, 18, -4, 17, 4, -3, 0, 32, -3, -2, 2, 3, -1, -5, -4, -12, 20, -5, 3, 1, 11, -6, 2, 6, 0, -2, 8, -1, -5, 0, -2, -24, 0, 4, 8, 0, 12, 6, 1, 7, -4, -12, -2, -1, 9, 14, -1, -1, 8, -1, 7, 10, 2, -7, 6, 1, 1, 6, -1, 3, -2, 7, -3, 3, -1, 2, 1, -33, -2, 9, -6, 0, 6, 1, -6, 9, 6, -2, 3, -10, -14, 1, -3, -1, 1, -3, -2, -14, -1, -26, 0, 11, -1, -4, 3, -1, -12, 14, 4, 15, 7, -12, 5, -4, -5, 5, 2, 10, 6, 6, 0, -2, 20, 9, 8, 19, 8, 10, 8, -7, -3, 24, 2, -2, -2, 4, 3, 8, -15, 0, 7, 39, 2, -7, 0, -5, 2, -4, 5, -4, 1, 4, 8, 13, -46, 1, -2, 5, -2, -10, 6, 24, 5, 0, -3, 4, 2, -5, -6, 13, -12, -6, 11, 9, 12, 15, 1, -3, 1, 10, 11, -1, -9, -2, 9, 3, 16, -9, 5, -7, -3, -18, -13, 25, 5, -25, -5, -4, 3, -6, 6, -19, -6, 0, 10, 19, 0, 4, 8, 7, 0, 18, 3, 5, -4, 6, 0, -6, -5, 10, 0, 9, 8, 2, 10, 0, 3, -1, -6, 12, 9, 10, 7, -4, -3, 6, 9, -43, 7, 6, -4, 7, 3, 4, 0, 6, 3, 8, 2, -17, -36, -17, -7, 13, -9, 5, 3, -22, 2, -32, 6, -1, 8, -2, 3, 1, -9, 9, -1, -5, 8, 5, 0, 20, -2, -2, 7, 8, -11, 5, -3, -17, 17, 12, 9, -2, 2, -12, 7, 9, -2, 9, 2, 5, -1, 11, 5, -3, 21, 0, 2, 15, 6, 3, -5, -2, -3, -10, 6, -1, 16, 7, 13, -1, -54, -19, 2, 5, 9, -10, 0, -21, 1, -20, 8, 6, -5, -6, 2, 14, -20, 9, -4, 16, 12, 30, 9, 1, -1, 6, 12, 10, 8, 0, -2, -23, -10, -6, 5, -7, -14, -9, -8, -6, 0, -12, -8, -1, -4, -4, 8, -14, -11, 14, 7, 8, 4, -1, -2, 13, 0, -6, 5, 8, 2, 12, 2, 1, 13, 10, 4, -4, 3, -3, 7, 4, 16, -4, 2, 3, 2, 8, 7, -9, -37, -5, -3, -44, -3, 10, 7, 2, 0, 1, 0, 9, -7, 2, 6, -26, -32, -23, -4, 3, -6, -9, -3, 13, 2, -33, -4, -2, 13, 3, 0, -19, -6, -5, 4, 35, -3, 0, -1, 21, 1, 0, 3, 1, -4, -4, 7, -4, 10, 5, -4, 18, 0, 2, 3, -7, -1, -3, 4, 2, 6, 6, 4, -1, -5, 10, 7, 36, 9, -3, -1, 15, -2, 9, 0, -6, 10, 3, -5, -5, -34, -13, 2, 4, 4, 7, 2, -45, -6, -16, -9, 10, 1, -7, 5, -8, -28, 9, 8, 29, 0, 3, -1, -2, 3, 16, 2, -5, 2, 8, -5, -12, 19, -13, 5, 1, 11, -25, -3, -22, -3, -28, -5, 0, 3, 3, -2, -8, 4, 6, 5, -8, -3, -12, -4, -1, 5, -9, -1, 6, 8, -4, 6, 5, 14, 10, 10, 14, -2, -2, 4, 0, 10, 9, 7, 10, 0, 2, -1, 5, -14, 13, -4, -26, 3, 4, 2, -21, 0, 2, 4, -4, -4, -4, 5, -11, -36, -21, 2, 7, 2, 14, 1, -8, 7, -17, -12, -3, 4, -5, -5, -11, 2, 3, 1, 21, 9, 11, 1, 36, -4, 17, 0, 1, 7, -5, 9, 13, 19, 4, 8, 13, 6, 10, 4, 7, 6, 9, 7, -2, -2, -1, 2, 11, 2, 13, -2, 21, 2, -3, 2, -6, 1, 2, -2, -2, 9, -2, 9, 0, -37, -12, 2, -18, 5, 4, 6, 8, 5, 9, -9, 7, 1, 3, 5, 2, -28, 5, 4, 15, 0, 18, 6, 21, -6, -1, 12, 2, -10, -2, 0, -29, 23, -15, 4, -27, -1, -18, -10, 13, 4, -40, 2, 1, 9, -3, 6, -27, 0, 7, -1, 3, -2, -4, 15, -3, -2, -16, 7, 10, 8, 4, 7, 1, 3, 5, 9, 30, 6, -3, 10, 4, -3, 5, 0, -3, 5, 7, 11, -5, -9, 2, 1, -40, 7, 3, 11, 7, 6, 9, 1, 3, 8, 4, 14, -14, -29, -6, 8, -6, 9, 0, 3, -9, 7, -14, -5, -3, 1, 9, 4, -10, -9, 9, -1, 12, 4, 22, 5, 3, 3, 1, 5, 4, -4, 5, 1, -4, -20, -1, 9, 18, -4, 18, 1, 26, 11, 4, 6, 2, 1, 6, -3, 1, 14, -2, -9, 3, 0, 10, 1, 5, 1, 4, 6, 2, 1, 6, -3, -8, -38, 3, 0, 7, 7, 0, 7, -11, 7, -14, -4, 0, -8, 5, 14, 13, -29, 9, 5, 36, 3, 10, 14, 15, -8, 1, 9, 6, -3, 0, 6, -30, 26, -4, 11, -6, -9, -13, -3, 0, 7, -20, -4, 3, 10, 7, -4, -7, 18, 8, -3, 28, 3, -2, -2, 5, 13, -7, 4, 3, -3, 0, 3, 6, 7, 6, -4, 13, 2, 3, 5, 14, -5, 16, 6, -2, 5, 8, -2, 1, 7, 8, -6, -33, 2, 2, 3, 2, 5, 9, -2, 3, -4, 13, -6, 5, -31, -13, 5, 9, -4, 4, -10, -22, -9, -29, 7, -4, 2, -8, 12, 2, -21, 8, -6, -3, -4, -5, 9, 6, 4, 4, 6, -3, -4, 8, 6, -4, 6, 3, 3, 8, 2, -9, 5, 16, 6, -14, -2, 9, 1, -3, 4, 8, 11, 6, -1, -9, 7, 11, 11, 3, 0, 2, -2, -5, -3, -3, -9, -6, -28, -12, 10, 9, -5, 6, -11, -7, 1, -9, 0, 13, 3, -5, 4, 11, -15, 9, -7, 33, 7, 17, -1, -3, -3, -1, 13, -4, -1, 9, 11, -9, 5, -10, -3, 5, -8, -26, 3, -13, -3, -27, -10, 0, 8, -5, -1, 0, -16, 1, -6, -14, -2, -1, 5, 2, 0, -5, 7, -5, 0, 6, 1, 8, 1, 3, 7, 39, 11, 7, 0, 8, 8, 8, 10, 4, 7, 4, 12, -3, -5, 3, 3, -26, -3, 4, -2, 4, -1, 1, 0, 0, 6, 6, -6, -29, -29, -12, -5, 22, -4, 10, -13, -26, -2, -33, -3, 3, 10, -6, 2, -7, -4, -2, -1, 21, -2, 9, -3, 27, 6, -2, 4, 0, -2, -3, -3, -3, -13, -2, 6, 6, 2, 10, 3, 13, 4, 1, -2, -1, -1, 4, -3, 7, 5, 10, -1, 26, 10, -2, 9, 13, 4, -3, 4, 15, -2, 4, 1, 2, -31, -18, 3, 18, 4, 14, -2, -37, 0, -3, 9, 5, 3, -5, -1, -9, -21, 3, -5, 4, 4, 4, 4, -15, 2, -4, 0, 1, 7, 4, 4, -5, 11, -17, 1, -7, -4, -27, -7, -13, -2, 3, 8, 3, 2, 5, 9, -8, -1, 7, 4, 7, -1, -4, -7, 14, 10, -6, -1, 12, 2, 5, -3, 6, 15, 8, 9, 4, 5, 12, 6, -6, 2, 2, -3, -6, -6, 4, 5, -1, -4, -1, -1, -18, 1, 0, 3, 4, 9, -3, 1, 2, 4, -7, 10, -17, -21, -14, 2, -6, 1, 1, 7, -17, 8, -41, 4, 1, -8, 5, -2, 8, -9, 7, 10, 12, 12, 12, 14, 5, -10, 3, 7, 8, 8, -6, -9, 10, 7, 0, -4, 8, 0, -12, 6, 5, 13, 12, 9, 6, 7, -7, 5, 3, 4, 8, 4, 45, 5, -7, 0, 6, 6, 9, 8, 5, 4, 3, -6, 2, -34, 15, 5, -4, -4, -7, -1, -17, 1, -1, 4, 4, -7, 7, 3, 0, -23, -4, 2, 21, 5, 1, 16, 23, -4, 17, 4, 7, 2, -1, 10, 18, 14, 2, 14, -21, -2, -16, 6, 5, -6, -8, 6, -1, 6, 3, 12, 1, 23, -4, 5, -22, 3, -9, -3, -4, 4, -1, -3, 8, 0, 9, 6, -1, 18, 10, 0, -4, 14, -1, 9, 15, -1, 6, 9, 1, 6, 10, -6, -2, 17, -2, 0, -45, 0, 9, -2, -13, -5, 11, 5, 13, 6, 2, -6, -1, -32, -7, -7, -2, 0, -11, 3, 8, -12, -28, 5, -2, 0, -5, 4, 8, -21, -2, -1, 10, -1, -1, 1, 5, 2, -8, 4, -3, 8, -4, 5, 9, 1, 3, -2, 3, 7, 12, 2, 3, -3, -24, 0, -3, -3, -3, 0, 6, -2, 2, -2, -14, 8, -3, 3, 4, 1, 9, 7, 5, -6, -1, 2, -1, -33, 18, 3, 3, 5, -9, 1, 9, 4, -9, 4, 8, 3, 3, -5, -2, -7, 11, 3, 5, 10, -5, 11, -8, -1, -7, 3, 1, -3, -1, -3, -9, -2, -4, 3, -27, -11, 5, -11, 10, 1, -15, 1, -10, -2, -2, 3, -13, 11, -4, -7, -3, 4, -5, 1, 5, 3, -4, 1, 12, -5, 10, 7, 0, 1, 3, 4, 16, -4, 3, 7, 21, 10, -1, 0, 7, 0, 3, 0, 4, 2, 3, 8, -17, -3, -2, 9, 3, 5, 14, 4, -3, 2, 12, -3, -20, -18, -13, 11, -15, -5, -7, -20, -71, -1, -25, 4, 5, -8, -1, -1, 4, -6, -2, 1, 11, 7, -9, 2, -5, 3, 4, 7, -2, 4, 6, 8, -5, 5, 5, 12, 7, 5, -9, -6, 4, 2, -9, 8, 3, 4, 4, 11, 6, 7, -1, -3, 15, -2, 8, 6, -4, 10, 4, -6, 0, 4, -1, 7, 11, -29, -4, 4, 9, -5, 2, 3, -11, -3, 13, 0, 5, 2, 7, 6, 6, -24, 13, 7, 7, 1, 14, -4, 22, 2, 0, -1, 6, 4, 4, -2, -9, 4, 7, 11, -20, -10, -6, -14, 10, 2, -24, 7, 5, -1, 8, -2, -12, 6, 11, 1, 6, 4, -8, 7, -4, 9, -9, 3, -2, 4, 10, 4, -9, 3, 6, 4, 9, 2, -2, 7, 11, 0, -5, 8, -4, -1, 7, 1, -3, -11, 5, 6, -45, -6, 8, 0, 9, 6, 3, 6, 4, -8, -3, 0, -22, -24, -16, -2, -9, -6, 6, -11, 7, 8, -37, -6, 3, -4, 6, 6, -1, -4, 6, 5, 25, 5, 4, 3, -21, 1, -17, -3, 1, 2, 7, 1, -43, 15, -4, 11, 14, -1, -2, 6, 17, 1, -6, 0, 6, -2, -4, 6, 9, 8, 7, 6, 5, 2, 1, 12, 4, -1, 4, 5, -10, 3, -1, 1, 9, -25, -20, -4, 5, -1, 7, -3, 15, -4, -32, -2, 5, 5, 3, 14, 6, -6, 16, -2, 11, 11, 14, 1, -1, -4, 16, -1, 7, -6, -6, 1, -21, 0, 6, 1, 5, 4, -9, -9, -1, 2, -18, -9, 1, 5, 8, -3, 1, 8, 9, 0, 12, 2, 0, 7, 6, 0, -4, 8, 1, 2, 6, -11, 7, -2, 1, 6, 17, 6, 14, 1, 12, 7, 1, -4, -9, 2, 5, 15, -4, -2, -1, 2, -30, 6, 10, 7, 8, -1, 7, 3, 4, 4, 3, 4, -28, -9, -12, 4, 12, 9, 4, -5, -34, -1, -43, -2, 3, 0, 0, 6, -8, -6, -8, -1, 12, 2, 0, -17, -2, -3, -1, -13, 4, 6, -8, -1, -14, 14, -7, 2, 9, -1, 0, 2, 1, -5, -11, 14, -4, 6, 0, 9, 13, 30, 2, -4, 8, 5, -8, 4, 16, 1, 7, -1, 1, 5, 1, 15, -3, -29, 12, -2, -12, -1, 6, 0, -23, -1, 6, -3, 3, -6, 5, 2, 24, -10, 26, 5, 33, 3, 3, 4, 14, 9, 1, 8, 6, 6, -5, 2, -2, 23, -7, -1, 3, 2, -8, 4, 1, 10, -16, -1, 0, 6, 10, 8, 2, 12, 9, 1, 1, -1, 1, 13, 19, -1, 0, 0, -6, 5, 5, 9, 4, 16, -1, 10, 11, 10, 7, 5, -5, 16, 13, 7, -3, 4, 6, -2, 6, 16, 7, 1, -34, 2, 1, 2, 3, -4, -2, 1, -1, 10, -4, -2, -16, -15, -31, 7, 8, 4, -19, -13, -22, -1, -10, 6, 2, 1, -12, 2, -1, -12, 4, 6, 19, 3, 0, 10, 17, 5, -3, 2, -1, -9, 2, 5, -2, 7, 10, 2, 17, 14, -5, 6, 6, 4, -3, 14, 4, 5, 6, 11, 10, 18, 1, 3, 31, 0, -4, 0, 2, 5, 0, 1, -6, 3, -4, 5, 4, -24, 3, -1, 7, 2, 9, -2, -2, 3, -30, 5, -1, 8, 5, 0, 11, -14, 14, 5, 29, 5, 10, 6, 17, -6, 7, 7, 7, -2, 3, 0, 6, -19, -5, 4, -2, 5, 12, 0, 8, 1, -8, 6, 2, -1, 1, -6, -14, 11, 8, 1, 13, -7, -5, 0, 5, -5, -5, 6, 0, 9, 0, 0, 13, -3, 4, 4, 20, 8, -5, 7, -6, -5, -6, -2, 8, 11, 1, 2, 9, -7, 0, -7, -36, 3, 14, -3, 19, 3, -5, 5, 3, -6, 1, -5, -18, -19, -1, 5, 5, 1, -5, -1, 10, 6, -20, 6, 8, -2, 4, 8, -10, -7, 15, -1, 21, 12, -10, 11, -4, 9, 7, 4, 0, 2, 5, -8, 33, 3, 12, 0, -19, 6, 15, 8, 0, 6, 27, 11, 12, 10, 5, 6, 7, -6, 6, 2, 50, 9, 9, 1, 15, 3, 8, 8, 6, 1, 2, 9, 6, -4, 9, 6, 3, 3, 5, -4, 3, -1, -6, 5, 5, 11, -1, -2, 2, -3, 18, 8, 25, 10, 12, 2, 29, 1, 12, 4, 5, -10, 5, -4, 8, -6, -1, 9, -14, 1, -13, -5, 9, 0, 4, -3, -1, 9, 2, 7, -8, -4, 11, 3, -3, 3, 1, 10, 4, -3, -10, -3, 10, 0, 1, 7, 5, 16, -1, 7, -3, 7, 7, 7, -10, -1, -5, 10, 15, 10, 8, 1, 0, -7, 10, 2, -24, 11, 2, 8, 3, 4, -9, 8, 12, -1, 0, 13, -27, -17, -9, 2, 8, 3, -9, -3, -1, 3, -25, 8, 13, 6, -6, 1, 9, -17, 11, 6, 20, 5, -1, -2, -2, 5, 11, 2, 1, -2, -4, -2, 14, 3, -4, -4, 10, 6, 6, -4, 12, -3, 24, 6, 0, 4, 7, 5, -5, 1, 3, 13, 5, 3, -1, 5, 2, 11, 3, -2, 12, 3, 1, 15, -9, -36, 8, -3, 7, 9, 10, 2, -7, -3, -7, 5, 6, 4, 6, 0, 12, -14, -1, 9, 15, -2, 19, 12, 36, -6, 20, 7, 9, -3, -6, -1, -3, 7, -8, 5, 6, 1, -7, -4, 9, 9, -12, 5, 2, 4, 11, 6, -2, 2, 12, 5, 8, -2, -3, 8, 0, 4, -8, -6, -4, 7, 3, 11, -1, 12, 4, 7, 16, 11, 11, 3, 5, 0, 0, 2, 3, 9, 7, 4, 3, -2, 5, -4, -11, 3, 3, -1, 11, 1, 4, -12, 10, -1, -5, 2, -22, -11, 1, 4, -8, 6, -3, 2, -29, 3, -15, -3, 6, -1, 6, 6, -10, -3, -9, 5, 16, -2, 10, 4, 52, -7, 13, -5, -1, -1, 5, 9, 13, 16, 1, 10, 4, 9, 13, 9, 3, 4, 6, 5, 8, 3, 3, -1, -7, 13, 9, 3, 10, 8, 10, 2, -4, 11, -5, -2, -1, -4, 8, 12, 19, -14, -1, 4, 22, 1, -4, -5, 6, 13, 7, 3, 9, 3, 10, -3, 16, -6, 28, 6, 20, 6, 16, 18, 27, -11, 19, 9, -2, 7, -4, 5, 21, 6, 21, 7, 9, -9, -2, -12, 6, 4, 2, 8, -1, 2, 6, 7, -2, 8, 8, 3, 17, 3, 6, 9, 7, 11, 1, 7, -1, 2, 4, 2, -3, 6, -4, -1, 30, 5, 8, 9, 5, 5, 14, -2, -5, 3, -4, 6, 6, 3, 8, -5, -27, 10, 7, -4, -1, 7, -2, -4, 4, 7, 4, -2, -20, -11, 0, 6, 1, -2, -9, -4, 23, -2, -30, -4, 5, 9, 4, 8, -9, 3, 11, 5, 17, 6, 1, 10, 9, -3, -8, -5, 2, 9, 9, -1, 13, -5, -5, 3, 8, -1, 15, 10, 7, 3, 19, 3, 3, 10, 2, 3, 13, 19, 1, 2, 35, 8, -5, 13, 3, 8, 19, 1, 1, 9, 7, 0, 15, -32, -10, 0, 18, 2, 2, 4, 6, -2, -6, 14, -5, 2, 8, 7, 14, 0, 13, 1, 13, 2, 30, 5, 17, 3, 22, -2, 2, 5, 15, 0, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 3,4960 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0046461797319352627, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[8*3*3*1] = { 
  /* [0][0][][] */ 69, 86, -52, 
  /* [0][1][][] */ 127, 89, -47, 
  /* [0][2][][] */ 123, 87, 9, 
  /* [1][0][][] */ -67, -41, -16, 
  /* [1][1][][] */ -99, 24, 30, 
  /* [1][2][][] */ -38, -127, -21, 
  /* [2][0][][] */ -32, -68, -22, 
  /* [2][1][][] */ 30, -105, -49, 
  /* [2][2][][] */ -127, 47, 30, 
  /* [3][0][][] */ -94, 115, -7, 
  /* [3][1][][] */ 25, 127, -22, 
  /* [3][2][][] */ -77, 113, -33, 
  /* [4][0][][] */ -69, 16, -29, 
  /* [4][1][][] */ -8, 67, -116, 
  /* [4][2][][] */ -39, -57, -127, 
  /* [5][0][][] */ 81, -38, -18, 
  /* [5][1][][] */ 8, -39, -112, 
  /* [5][2][][] */ -127, -16, 84, 
  /* [6][0][][] */ -127, -55, -86, 
  /* [6][1][][] */ -121, -22, 30, 
  /* [6][2][][] */ 34, 11, -75, 
  /* [7][0][][] */ -15, -127, -4, 
  /* [7][1][][] */ 46, 22, -114, 
  /* [7][2][][] */ -111, -20, -77, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant7_scale = { 8, { 0.0017510245088487864, 0.0025655289646238089, 0.0029925780836492777, 0.0023295232094824314, 0.0017619692953303456, 0.0011497993255034089, 0.0031166970729827881, 0.0011291868286207318, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int8_t tensor_data8[16*3*3*8] = { 
  /* [0][0][][] */ 5,-127,-67,73,-41,-56,-21,-43, 43,-31,-47,-13,-36,-68,-6,-34, -12,-39,12,14,-3,12,8,-31, 
  /* [0][1][][] */ 41,-103,-100,48,-23,-57,-116,24, -2,-8,0,-12,-38,-39,-38,-77, -47,15,-52,-7,22,11,-18,5, 
  /* [0][2][][] */ 23,-97,-92,79,22,-39,-51,17, 17,-29,-22,-1,-14,-23,-74,-63, -49,-14,-34,-1,-39,-20,-6,23, 
  /* [1][0][][] */ -84,54,-38,-80,-7,-38,7,17, -90,-14,-39,-11,-41,11,9,-16, 9,81,75,38,59,-21,7,32, 
  /* [1][1][][] */ 21,-70,10,22,31,14,6,-2, -58,6,48,-32,17,-2,5,-43, -60,37,97,-18,6,-44,127,66, 
  /* [1][2][][] */ 18,14,16,16,-73,-5,18,-45, -72,55,0,-36,-19,-69,-37,20, -95,73,55,2,62,-30,78,-4, 
  /* [2][0][][] */ -92,17,-79,-96,-14,27,-76,-95, 31,-127,-62,87,3,-51,-71,17, -70,-100,-49,-94,-15,-10,-3,-21, 
  /* [2][1][][] */ -13,20,35,28,1,38,-30,-60, 49,-101,-106,-5,1,-74,-104,-29, -17,-12,6,41,-4,14,-89,23, 
  /* [2][2][][] */ -46,16,-3,-64,-2,38,30,-21, 68,-107,-61,61,-6,23,-76,-62, -14,14,21,-25,-62,-59,16,32, 
  /* [3][0][][] */ -89,-8,-28,-29,-56,38,-65,45, -67,-64,-2,38,23,40,40,-44, -29,-113,12,-23,-72,21,29,-66, 
  /* [3][1][][] */ -37,-116,-65,34,35,-61,-38,50, -25,61,56,-19,-59,-28,8,-24, -62,-53,-60,-12,-35,-40,-33,-14, 
  /* [3][2][][] */ -127,-94,12,38,-97,27,-106,-117, -119,45,39,10,-83,-70,63,-60, -86,-8,6,-115,-41,29,27,37, 
  /* [4][0][][] */ -46,9,23,-52,23,-33,-5,24, -47,-42,-23,-33,-44,-15,-34,37, 82,-123,-15,44,-23,23,-127,19, 
  /* [4][1][][] */ -53,13,-12,-43,-44,22,-30,16, -25,-58,-36,-47,13,33,-48,-21, -28,-102,-70,121,-49,-46,-83,-26, 
  /* [4][2][][] */ -33,-1,33,-26,-60,31,-33,-9, -3,-28,-63,7,-70,-36,-47,14, 55,-60,-52,65,39,-43,-80,-56, 
  /* [5][0][][] */ 24,-77,-115,5,36,67,-24,58, -86,-119,-105,55,27,58,-81,-84, -54,-31,14,0,37,-20,-84,29, 
  /* [5][1][][] */ -90,15,2,-19,-116,-59,-64,44, -30,-76,-26,-48,17,-34,-90,-75, -85,54,-31,10,-50,-7,28,23, 
  /* [5][2][][] */ -80,-117,-21,64,-88,67,-127,-28, -26,26,-42,-41,46,54,-4,-36, -107,-30,34,59,11,47,54,-10, 
  /* [6][0][][] */ 52,-51,3,79,-24,45,-103,42, 31,-103,-30,-90,-2,90,-100,-121, -62,9,-46,-57,49,-68,-53,-26, 
  /* [6][1][][] */ 24,-31,-51,-95,-108,5,-21,-68, 90,-41,-127,69,-2,-1,-24,-106, -84,-52,-58,-5,-36,44,-58,-99, 
  /* [6][2][][] */ -39,-31,-5,10,24,75,-99,73, 43,10,-107,-52,-90,81,-30,-1, -41,-15,-93,4,53,14,-29,58, 
  /* [7][0][][] */ -103,-88,32,-83,-73,62,38,4, 50,-116,-108,19,61,22,10,-127, -110,-114,-91,-13,32,-7,-102,52, 
  /* [7][1][][] */ 26,-27,-115,5,35,55,-34,-60, -29,5,58,67,-1,-91,-43,-48, 43,-78,-76,77,58,-29,-52,-109, 
  /* [7][2][][] */ 37,15,46,-19,9,-116,-91,28, -114,-73,-57,112,-109,-57,-90,-46, 29,-4,45,-91,-19,-13,-16,-10, 
  /* [8][0][][] */ -31,-38,22,0,4,0,-22,30, 4,-64,-125,84,26,-13,-10,19, 29,-78,22,-105,-38,-67,29,13, 
  /* [8][1][][] */ -40,-48,-74,-69,43,-56,-46,26, 73,-72,-55,-38,27,33,-83,26, 14,-2,-20,33,-66,-33,-36,-11, 
  /* [8][2][][] */ -42,-34,10,87,-69,-76,-17,-3, -12,-14,-5,-102,-74,-56,-127,-65, -9,-40,-110,3,-57,-84,-26,-34, 
  /* [9][0][][] */ -50,-67,10,-47,39,32,-127,-46, -37,61,55,-91,0,4,67,-65, -91,-29,10,-17,-9,-52,2,-2, 
  /* [9][1][][] */ -88,33,29,48,54,-19,-50,-79, -25,3,-19,-11,-45,51,0,-20, -50,-69,-47,-36,25,13,-110,13, 
  /* [9][2][][] */ -25,-36,-3,-44,-54,44,-11,44, -86,-58,-118,-69,39,-53,12,49, 28,-85,-121,-98,-13,10,-23,-60, 
  /* [10][0][][] */ 33,-104,-47,48,-24,-54,-120,-12, 69,-36,-28,59,56,13,10,-48, -10,10,-18,-52,-22,-34,22,-28, 
  /* [10][1][][] */ 66,-65,-44,67,-56,-44,-126,-10, 32,-89,-49,41,20,-85,-86,-16, -43,40,10,-27,30,-26,-14,35, 
  /* [10][2][][] */ 41,-127,-120,116,-7,-2,-86,-8, 45,-44,-9,25,-31,0,-32,-14, 0,7,36,-40,-33,-54,-24,-8, 
  /* [11][0][][] */ -16,-85,-45,25,-40,-87,20,-20, -55,31,22,-61,-73,-26,-31,67, 14,-16,-123,49,62,-92,39,9, 
  /* [11][1][][] */ -60,-8,-69,6,-11,51,-18,-6, -77,-68,54,-6,-53,-14,-9,-92, 21,-62,-55,-82,-11,18,2,0, 
  /* [11][2][][] */ -109,-127,-51,49,34,11,-18,-102, -86,-50,-40,-27,-62,-68,-87,-53, -102,-33,14,16,47,-18,16,-63, 
  /* [12][0][][] */ 29,-40,-123,-48,11,47,5,-100, -59,-42,74,-30,42,-98,28,13, -42,-23,-65,-75,-33,35,-40,47, 
  /* [12][1][][] */ -105,25,-34,7,27,59,-23,-6, 12,-46,12,-127,10,10,-109,22, 47,-21,-100,-11,-11,-80,-103,36, 
  /* [12][2][][] */ -62,-95,79,-13,-25,-14,-66,62, -51,-58,-53,-17,-69,-52,-72,-73, -64,41,-58,3,-61,-75,-83,-34, 
  /* [13][0][][] */ -59,-6,-80,39,-102,-99,-42,-95, -119,-66,4,-69,29,-22,-111,-85, -66,-120,-108,12,-34,7,44,-69, 
  /* [13][1][][] */ 35,-52,24,-14,6,-33,46,30, -66,-2,6,-112,-37,48,-64,12, 61,-127,3,-102,-62,-25,47,-5, 
  /* [13][2][][] */ 1,-25,-43,-55,-62,8,57,-27, 16,-82,-53,-60,50,-28,1,-101, -123,-43,28,-48,41,17,-61,23, 
  /* [14][0][][] */ -27,-21,22,2,-122,70,-79,-111, 0,-10,-118,-21,44,-40,-53,-67, -83,0,15,-103,-24,13,-28,-33, 
  /* [14][1][][] */ -113,-45,35,-79,-18,-78,6,-19, -118,21,-5,-73,-83,-92,-35,28, 3,30,-105,24,-86,-127,10,-39, 
  /* [14][2][][] */ -2,-9,-35,34,-56,-88,-33,38, 15,40,48,-62,17,-116,-110,68, 9,-31,59,-59,37,-11,-16,-94, 
  /* [15][0][][] */ 26,-8,-52,19,-73,-107,-93,-52, -50,-16,-18,-102,47,49,73,-27, 23,-85,-1,-101,-59,4,-102,-3, 
  /* [15][1][][] */ -35,-8,-14,-114,-74,-68,-3,-58, -36,18,-76,-79,-57,32,12,72, -19,-96,-10,-81,-50,64,39,10, 
  /* [15][2][][] */ -101,-63,-7,-19,23,-26,-127,15, 31,38,71,-71,17,-13,-52,-67, 19,-70,-95,-48,-52,40,31,64, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0033512685913592577, 0.0023555080406367779, 0.0022380310110747814, 0.0018832638161256909, 0.0026891143061220646, 0.0018125196220353246, 0.0017704888014122844, 0.0016282759606838226, 0.0025653364136815071, 0.0019832798279821873, 0.0028879374731332064, 0.0017858609789982438, 0.0017478109803050756, 0.0016209306195378304, 0.0017364849336445332, 0.0016796361887827516, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,123,40,1 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0031709559261798859, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,123,40,8 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0023252684623003006, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,62,20,8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.0023252684623003006, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,62,20,16 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0023127738386392593, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,31,10,16 } };
const TfArray<1, float> quant13_scale = { 1, { 0.0023127738386392593, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,4960 } };
const TfArray<1, float> quant14_scale = { 1, { 0.0023127738386392593, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,3 } };
const TfArray<1, float> quant15_scale = { 1, { 0.033339936286211014, } };
const TfArray<1, int> quant15_zero = { 1, { 56 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,3 } };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,2 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 9,7,3 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 10 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 11,8,4 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 13,1 } };
const TfArray<1, int> outputs5 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata6 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs6 = { 3, { 14,6,5 } };
const TfArray<1, int> outputs6 = { 1, { 15 } };
const TfLiteSoftmaxParams opdata7 = { 1 };
const TfArray<1, int> inputs7 = { 1, { 15 } };
const TfArray<1, int> outputs7 = { 1, { 16 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 4920, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 14880, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 39360, (TfLiteIntArray*)&tensor_dimension9, 4920, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 39360, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 39360, (TfLiteIntArray*)&tensor_dimension11, 9920, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 19840, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 19840, (TfLiteIntArray*)&tensor_dimension13, 4960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 4960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4960, (TfLiteIntArray*)&tensor_dimension15, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 17;
  for(size_t i = 0; i < 17; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 8; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 8; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  16, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 8; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
